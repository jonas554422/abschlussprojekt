def plot_reservierte_räume(self):
        l1 =[]
        l1:list =  self.get_all_reservations() #Liste aller aktuell reservierten Räume(Wer hat reserviert, Wie lang, Welchen Raum)


        #Welcher raum ist am belibtesten?
        #Raum wurde mehrmals gebucht oder der TimeSlot ist am längsten
        #plot(bar chart) von raumnummer und gebuchten Stunden

        #neue Liste die Nur noch Raumnummer und die gebuchten Stunden enthält
        dict_1 = {}
        l2 = []

        for item in l1:
            date = item['date']
            room_number = item['room_number']
            start_time = datetime.strptime(item['start_time'], '%H:%M')
            end_time = datetime.strptime(item['end_time'], '%H:%M')
            duration_hours = (end_time - start_time).total_seconds() / 3600  # Differenz in Stunden berechnen

            if room_number in dict_1 and date == dict_1[room_number]['date']:
                dict_1[room_number]['total_time'] += duration_hours  # Gesamtzeit für diesen Raum aktualisieren
            else:
                if room_number in dict_1:
                    # Raumnummer vorhanden, aber Datum unterscheidet sich, daher neuen Eintrag hinzufügen
                    l2.append({'date': dict_1[room_number]['date'], 'room_number': room_number, 'total_time': round(dict_1[room_number]['total_time'], 2)})
                dict_1[room_number] = {'date': date, 'total_time': duration_hours}  # Raum hinzufügen oder aktualisieren

        # Füge die letzten Einträge aus dict_1 zu l2 hinzu
        for room_number, entry in dict_1.items():
            l2.append({'date': entry['date'], 'room_number': room_number, 'total_time': round(entry['total_time'], 2)})
        
        if len(l2) == 0:
            pass
        #Plot:
        # Nur maxmimal 10 plots Pro Subplot, sortiert nach den Stunden!!!
        # Noch zu implementieren!!!
        # Sortiere die Daten nach Datum
        # Daten vorbereiten
        # Daten vorbereiten
        else:
            dates = sorted(set(item['date'] for item in l2), key=lambda x: datetime.strptime(x, '%A, %d.%m.%Y'))
    
            # Farbpalette basierend auf der Anzahl der einzigartigen Daten generieren
            num_unique_dates = len(dates)
            color_palette = plt.cm.get_cmap('tab10', num_unique_dates)
    
            # Größe für jeden Subplot definieren
            subplot_width = 10  # Breite jedes Subplots
            subplot_height = 4  # Höhe jedes Subplots
    
            # Gesamtanzahl der Subplots berechnen
            num_subplots = len(dates)
    
            # Größe der gesamten Figur basierend auf der Anzahl der Subplots anpassen
            fig_width = subplot_width
            fig_height = num_subplots * subplot_height
    
            # Figure erstellen
            if num_subplots > 1:
                fig, axs = plt.subplots(num_subplots, figsize=(fig_width, fig_height))
            else:
                fig, ax = plt.subplots(figsize=(fig_width, fig_height))
    
            # Schleife über jedes Datum und Erstellung des Barcharts für jeden Raum
            for i, date in enumerate(dates):
                # Filtern der Einträge für das aktuelle Datum
                filtered_entries = [item for item in l2 if item['date'] == date]
                filtered_entries.sort(key=lambda x: x['total_time'], reverse=True)  # Sortieren nach höchsten Stunden
                filtered_entries = filtered_entries[:5]  # Begrenzung auf die 5 Einträge mit den höchsten Zeiten
                filtered_room_numbers = [entry['room_number'] for entry in filtered_entries] 
                filtered_total_times = [entry['total_time'] for entry in filtered_entries]
    
                # Farben für die Balken aus der Farbpalette auswählen
                color = color_palette(i)
    
                # Erstellen von Barcharts für die Gesamtzeit jedes Raums an diesem Datum
                if num_subplots > 1:
                    ax = axs[i]
                else:
                    ax = axs
                bars = ax.bar(filtered_room_numbers, filtered_total_times, color=color)
    
                # Achsenbeschriftungen und Titel hinzufügen
                ax.set_xlabel('Raumnummer')
                ax.set_ylabel('Reservierte Zeit/h')
                ax.set_title(f'Folgende Räume wurden am {date} Reserviert')
    
                # Raumnummern als x-Achsenbeschriftungen festlegen
                ax.set_xticks(range(len(filtered_room_numbers)))
                ax.set_xticklabels(filtered_room_numbers, rotation=45)  # Rotation der Beschriftungen für bessere Lesbarkeit
    
                # Beschriftungen für jeden Balken hinzufügen
                for bar, time in zip(bars, filtered_total_times):
                    ax.text(bar.get_x() + bar.get_width() / 2, time / 2, f'{time}h', ha='center', va='center')
    
            # Layout anpassen und Plot anzeigen
            plt.tight_layout()
            st.pyplot(fig)